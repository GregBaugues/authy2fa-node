.step(data-title='Creating a Session', data-file='public/index.html', data-highlight='')
  :markdown
    ### Creating a Session

    Creating a `Session` that has been validated with 2FA is a multi-step process invloving your web application, the user (and their mobile phone), and the Authy API. Let's walk through the code that implements our login process now. To help keep us on track, we will follow this flow chart showing how our 2FA system creates an authenticated session that can be used to make HTTP requests for protected data:

    ![2FA Flow Chart](//s3.amazonaws.com/howtodocs/2fa-flow.png)

    Let's begin by talking briefly about how our front end application works.

.step(data-title="About the Front End", data-file='public/index.html', data-highlight='47-63')
  :markdown
    ### About the Front End

    ![2FA Flow Chart Step 1](//s3.amazonaws.com/howtodocs/2fa-flow1.png)

    Our user interface for this example is a [single page application](http://en.wikipedia.org/wiki/Single-page_application) written using [Backbone](http://backbonejs.org/) and [jQuery](http://jquery.com/). The UI logic driving our application is a series of [Backbone Views](http://backbonejs.org/#View) that are set up to respond to click events and form submissions, and navigate to different parts of the UI. Don't worry if you're not familiar with these technologies - understanding the front end is not critical to grasping how the 2FA flow works. 

    It should suffice for you to understand that this single web page will make a series of asynchronous ("Ajax" if you prefer) HTTP requests to our Node.js web application. We will create an authenticated `Session`, which will be identified by a unique token that we will include with all of our requests to validate our identity.

    Let's start by looking at the HTML for the login form.


.step(data-title='The Login Form', data-file='public/app/templates/login.html', data-highlight='')
  :markdown
    ### The Login Form

    ![2FA Flow Chart Step 2](//s3.amazonaws.com/howtodocs/2fa-flow2.png)

    On this login form, the user will attempt to validate the first "factor" of their identity, which is a password they already know. The user will enter their e-mail address and password in this form, and will send it to our server for validation.

    With a little CSS assist from [Twitter Bootstrap](http://getbootstrap.com/) and [Font Awesome](http://fortawesome.github.io/Font-Awesome/), the login form will look something like this:

    ![The Login Form](//s3.amazonaws.com/howtodocs/2fa-screen-login.png)

.step(data-title='Testing The E-Mail Address and Password', data-file='api/sessions.js', data-highlight='6-43')
  :markdown
    ### Testing The E-Mail Address and Password

    ![2FA Flow Chart Step 3](//s3.amazonaws.com/howtodocs/2fa-flow3.png)

    On the server, this is the handler function for the `POST /sessions` route which we requested via Ajax on our login form. Using the `User` model, we first find a user instance with the e-mail address in the POST parameters. If that user exists, we test the password that the user entered against the hashed password to see if it's correct.

    If the e-mail / password combination match, we create a new (unvalidated) session object using the `Session` model.  Let's jump into `Session.createSessionForUser` next to see what happens when the session is created.

.step(data-title='Creating an Unverified Session', data-file='models/Session.js', data-highlight='22-47')
  :markdown
    ### Creating an Unverified Session

    ![2FA Flow Chart Step 4](//s3.amazonaws.com/howtodocs/2fa-flow4.png)

    In our `Session` model, we begin by creating a new session instance, associated with the unique ID of the user it's being created for.

    It's possible that we immediately want to create an authorized session for the user, which is what we currently do in the user signup flow (not covered in this tutorial, but implemented in the code). But for a login, we don't want to pre-confirm the session. Instead, we call the `sendAuthyToken` method on the `User` model to send them a 2FA token that we can eventually use to validate our session.

    Let's step into `sendAuthyToken` next to see how we use Authy to send out the 2FA token.

.step(data-title='Sending a 2FA Token', data-file='models/User.js', data-highlight='64-90')
  :markdown
    ### Sending a 2FA Token

    ![2FA Flow Chart Step 5](//s3.amazonaws.com/howtodocs/2fa-flow5.png)

    Before we can send out a one-time password via Authy, we need to [register a new Authy user](http://docs.authy.com/#section-9) and obtain a unique ID for that user in their system. We store that ID on our `User` model to tie our app's user and the associated Authy user together.

    Once there is an Authy user ID associated with our user model, we can request that an SMS verification token be sent out to the user's phone. Authy supports token validation in their mobile app as well, but for our purposes we'll just use text messages every time.

    We can call this method on the user instance multiple times if needed, which is what happens every time the user clicks "Resend Code" on the web form we are about to look at!

    Now that the user has been sent a one-time password via SMS, let's check out the UI they interact with to validate their code.

.step(data-title='The Verification Form', data-file='public/app/templates/verify.html', data-highlight='64-90')
  :markdown
    ### The Verification Form

    ![2FA Flow Chart Step 7](//s3.amazonaws.com/howtodocs/2fa-flow7.png)

    On this form, the user will enter the code that was sent to their mobile phone via SMS. If for some reason they didn't get the code, clicking the "Resend Code" link will initiate an Ajax request to the server which will use Authy to send them a new code.

    The verification form will look something like this to the end user:

    ![The Verification Form](//s3.amazonaws.com/howtodocs/2fa-screen-verify.png)

    Let's see how we verify the code they submitted.

.step(data-title='The Verification Form', data-file='public/app/templates/verify.html', data-highlight='64-90')
  :markdown
    ### Validating the Code

    ![2FA Flow Chart Step 8](//s3.amazonaws.com/howtodocs/2fa-flow8.png)

    Back in our Express route handler, we grab the code that was submitted from the form to validate. We have [Connect middleware](http://stephensugden.com/middleware_guide/) function that executes before this handler and adds a `user` property to the `request` object that contains a Mongoose model instance representing the user associated with this session. We use `verifyAuthyToken` on the `User` model to check if the code submitted by the user is legit.